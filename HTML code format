# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %% [markdown]
# # RealEstate-PricePredictor

# %%
import pandas as pd


# %%
housing = pd.read_csv("housingdata.csv.csv")


# %%
housing.head()


# %%
housing.describe()


# %%
housing.isnull().sum()


# %%
housing.info()


# %%
import missingno as msno


# %%
msno.matrix(housing)


# %%
# Filling the nan values or null or missing values by the total mean of that column

housing.ZN.fillna(housing.ZN.mean() , inplace = True)
housing.INDUS.fillna(housing.INDUS.mean() , inplace = True)
housing.CHAS.fillna(housing.CHAS.mean() , inplace = True)
housing.AGE.fillna(housing.AGE.mean() , inplace = True)
housing.LSTAT.fillna(housing.LSTAT.mean() , inplace = True)
housing.CRIM.fillna(housing.LSTAT.mean() , inplace = True)


# %%
housing.isnull().sum()


# %%
housing['CHAS'].value_counts()


# %%
housing.describe()


# %%
# %matplotlib inline


# %%
# import matplotlib.pyplot as plt 


# %%
# housing.hist(bins=50,figsize = (20,15))

# %% [markdown]
# 
# # Train-Test Splitting

# %%
# import numpy as np



#without implementing sklearn library
#for my better practice


# def split_train_test(data, test_ratio):
#     np.random.seed(42)
#     shuffled = np.random.permutation(len(data))
#     print(shuffled)
#     test_set_size = int(len(data) * test_ratio)
#     test_indices = shuffled[:test_set_size]
#     train_indices = shuffled[test_set_size :]
#     return data.iloc[train_indices],data.iloc[test_indices]
    
    


# %%
# train_set , test_set = split_train_test(housing,0.2)


# %%
#  print(f"Rows in train set : {len(train_set)}\nRows in test set : {len(test_set)}\n")


# %%
from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size=0.2, random_state = 42)
print(f"Rows in train set : {len(train_set)}\nRows in test set : {len(test_set)}\n")


# %%
from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size= 0.2, random_state=42)
for train_index , test_index in split.split(housing,housing['CHAS']):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]


# %%
strat_test_set['CHAS'].value_counts()


# %%
strat_train_set['CHAS'].value_counts()


# %%
# 91/7


# %%
# 361/27


# %%
housing = strat_train_set.copy()

# %% [markdown]
# # Looking for correalations

# %%
corr_matrix = housing.corr()


# %%
corr_matrix['MEDV'].sort_values(ascending=False)


# %%
from pandas.plotting import scatter_matrix
attributes = ['MEDV','RM','ZN','LSTAT']
scatter_matrix(housing[attributes], figsize=(12,8))


# %%
housing.plot(kind='scatter',x='RM',y='MEDV',alpha=0.8)

# %% [markdown]
# # Trying out attribute combination
# 

# %%
housing["TAXRM"] = housing['TAX']/housing['RM']


# %%
housing['TAXRM']


# %%
housing.head()


# %%
corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)


# %%
housing.plot(kind='scatter',x='TAXRM',y='MEDV',alpha=0.8)


# %%
housing = strat_train_set.drop("MEDV",axis=1)
housing_labels = strat_train_set['MEDV'].copy()

# %% [markdown]
# # Missing attribute
# 

# %%
a = housing.dropna(subset=['RM'])
a.shape     


# %%
housing.drop("RM" ,axis=1).shape
#Note that there is no RM column and also the orignal housing data will remain unchanged


# %%
median = housing['RM'].median()


# %%
housing['RM'].fillna(median)


# %%
housing.shape


# %%
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy = "median")
imputer.fit(housing)


# %%
imputer.statistics_


# %%
X = imputer.transform(housing)
housing_tr = pd.DataFrame(X, columns=housing.columns)
housing_tr.describe()

# %% [markdown]
# # PIPELINE OF WORKING

# %%
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer',SimpleImputer(strategy = "median")),
    ('std_scalar', StandardScaler())
    
])


# %%
housing_num_tr = my_pipeline.fit_transform(housing)


# %%
housing_num_tr.shape

# %% [markdown]
# # Selecting a desired model 

# %%
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
# model = LinearRegression()
# model = DecisionTreeRegressor()
model.fit(housing_num_tr , housing_labels)


# %%
some_data = housing.iloc[:5]


# %%
some_labels = housing_labels[:5]


# %%
prepared_data = my_pipeline.transform(some_data)


# %%
model.predict(prepared_data)


# %%
list(some_labels)

# %% [markdown]
# 
# ## Evaluating the model (Calculating RMSE) 

# %%
import numpy as sk
from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels,housing_predictions)
rmse = sk.sqrt(mse)


# %%
mse


# %%
rmse

# %% [markdown]
# ###Using better evaluation technique

# %%
from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr,housing_labels,scoring = "neg_mean_squared_error",cv=10)
rmse_scores = sk.sqrt(-scores)


# %%
rmse_scores


# %%
def print_scores(scores):
    print("Scores :", scores)
    print("Mean :", scores.mean())
    print("Standard deviation :", scores.std())
        


# %%
print_scores(rmse_scores)

# %% [markdown]
# # Using joblib SAVING THE MODEL

# %%
from joblib import dump, load
dump(model, 'RealEstate.joblib') 

# %% [markdown]
# # Testing the model on test data 

# %%
X_test = strat_test_set.drop("MEDV" , axis =1)
Y_test = strat_test_set["MEDV"].copy()
X_test_prepared = my_pipeline.transform(X_test)
final_predictions = model.predict(X_test_prepared)
final_mse = mean_squared_error(Y_test, final_predictions)
final_rmse = sk.sqrt(final_mse)
print(final_predictions , list(Y_test))


# %%
final_rmse


# %%
prepared_data[0]

# %% [markdown]
# # Final Testing of the model

# %%
from joblib import dump, load
import numpy as sk
model = load('RealEstate.joblib') 
input = sk.array([[-0.53726699, -0.48219781,  0.23997004, -0.27912249, -45.03704003,
       -36.566371074, -0.56607239,  0.61274863, -0.53573779, -0.0609062 ,
        0.10865604,  0.3515935 , -0.06296462]])
model.predict(input)


# %%
